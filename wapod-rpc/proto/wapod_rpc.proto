syntax = "proto3";

import "google/protobuf/empty.proto";

package wapod;

// The wapod public RPC service.
service User {
  // Get basic information about the worker state.
  rpc Info(google.protobuf.Empty) returns (WorkerInfo) {
    // Retrieves the basic information about the worker, including the public
    // key, number of deployed apps, running instances, maximum instances,
    // instance memory size, and the worker's session ID.
  }
  // Send a query request to a given app.
  rpc Query(QueryArgs) returns (QueryResponse) {
    // Sends a query request to the specified app, with the provided path and
    // payload. Returns the response payload from the app.
  }
}

// The wapod admin RPC service.
service Operation {
  // Get basic information about the worker state.
  rpc Info(google.protobuf.Empty) returns (WorkerInfo) {
    // Retrieves the basic information about the worker, including the public
    // key, number of deployed apps, running instances, maximum instances,
    // instance memory size, and the worker's session ID.
  }
  // Initialize the worker.
  rpc WorkerInit(InitArgs) returns (InitResponse) {
    // Initializes the worker with the provided initialization arguments,
    // including the previous metrics nonce reported to the chain. Returns the
    // new worker session and the seed used to derive the session.
  }
  // Terminate the worker.
  rpc WorkerExit(google.protobuf.Empty) returns (google.protobuf.Empty) {
    // Terminates the worker.
  }
  // Put a blob to the worker's blobs directory.
  rpc BlobPut(Blob) returns (Blob) {
    // Stores the provided blob in the worker's blobs directory.
  }
  // Remove a blob from the blobs directory.
  rpc BlobRemove(Blob) returns (google.protobuf.Empty) {
    // Removes the provided blob from the worker's blobs directory.
  }
  // Check if a blob exists in the worker's blobs directory.
  rpc BlobExists(Blob) returns (Boolean) {
    // Checks if the provided blob exists in the worker's blobs directory.
  }
  // Deploy a new WASM instance.
  rpc AppDeploy(DeployArgs) returns (DeployResponse) {
    // Deploys a new WASM instance with the provided manifest, which includes
    // the runtime, code hash, arguments, environment variables, start mode,
    // salt, and whether the app is resizable. Returns the address and session
    // ID of the deployed instance.
  }
  // Remove an instance from the worker.
  rpc AppRemove(Address) returns (google.protobuf.Empty) {
    // Removes the app instance at the provided address from the worker.
  }
  // Start an instance from the worker.
  rpc AppStart(Address) returns (google.protobuf.Empty) {
    // Starts the app instance at the provided address. On-demand instances will
    // reject this request.
  }
  // Stop an instance from the worker.
  rpc AppStop(Address) returns (google.protobuf.Empty) {
    // Stops the app instance at the provided address.
  }
  // Set the number of instances of an app.
  rpc AppResize(ResizeArgs) returns (Number) {
    // Sets the number of instances for the app at the provided address. Returns
    // the actual number of instances after the operation, which may be less
    // than the requested number due to the worker's capacity or the app's
    // support for multiple instances.
  }
  // Get metrics for each instance.
  rpc AppMetrics(Addresses) returns (AppMetricsResponse) {
    // Retrieves the metrics for the app instances at the provided addresses.
    // Returns the encoded metrics payload and the signature of the payload.
  }
  // List all deployed apps.
  rpc AppList(AppListArgs) returns (AppListResponse) {
    // Returns a list of information about all the deployed apps, including the
    // sequence number, address, number of running instances, whether the number
    // of instances is resizable, and the start mode.
  }
  // Remove all deployed apps.
  rpc AppsClear(google.protobuf.Empty) returns (google.protobuf.Empty) {
    // Removes all deployed apps from the worker.
  }
  // Send a query request to a given app.
  rpc AppQuery(QueryArgs) returns (QueryResponse) {
    // Sends a query request to the app at the provided address, with the
    // specified path and payload. Returns the response payload from the app.
  }
}

// Basic information about a worker.
message WorkerInfo {
  // The public key of the worker.
  bytes pubkey = 1;
  // The number of deployed apps.
  uint64 deployed_apps = 2;
  // The number of running instances.
  uint64 running_instances = 3;
  // The maximum number of instances.
  uint64 max_instances = 4;
  // The size limit of memory for each instance.
  uint64 instance_memory_size = 5;
  // The session ID of the worker.
  bytes session = 6;
}

// An object to be stored in the worker's object storage.
message Blob {
  // The key of the object.
  bytes hash = 1;
  // The hash algorithm used to generate the key.
  string hash_algorithm = 2;
  // The value of the object.
  bytes body = 3;
}

// Request to deploy an instance.
message DeployArgs {
  // Manifest of the app to be deployed.
  Manifest manifest = 1;
}

message DeployResponse {
  // The address of the deployed instance.
  bytes address = 1;
  // The session ID of the deployed instance.
  bytes session = 2;
}

// Manifest of an app.
message Manifest {
  // Name of the required runtime to run the app.
  string runtime = 1;
  // The hash of the app's code.
  bytes code_hash = 2;
  // The hash algorithm used to generate the code hash.
  string hash_algorithm = 3;
  // The arguments of the app.
  repeated string args = 4;
  // The environment variables of the app.
  repeated StringPair env_vars = 5;
  // The start mode of the app.
  uint32 start_mode = 6;
  // The salt used to derive the app's address.
  bytes salt = 7;
  // Whether the app can run multiple instances in a single worker.
  bool resizable = 8;
}

// Environment variable of an app.
message StringPair {
  // The key of the environment variable.
  string key = 1;
  // The value of the environment variable.
  string value = 2;
}

// Address of an app.
message Address {
  // @codec scale crate::types::Address
  bytes address = 1;
}

message Addresses {
  // @codec scale crate::types::Address
  repeated bytes addresses = 1;
}

message AppMetricsResponse {
  // @codec scale crate::types::AppsMetrics
  // The metrics payload.
  bytes encoded_metrics = 1;
  // The signature of the metrics payload.
  bytes signature = 2;
}

message AppListResponse {
  // The list of deployed apps.
  repeated AppInfo apps = 2;
}

message AppInfo {
  // The sequence number of the app.
  uint64 sn = 1;
  // The address of the app.
  // @codec scale crate::types::Address
  bytes address = 2;
  // The number of running instances of the app.
  uint64 instances = 3;
  // Whether the number of instances is resizable.
  bool resizable = 4;
  // The start mode of the app.
  uint32 start_mode = 6;
}

message Boolean { bool value = 1; }

message InitArgs {
  // The previous metrics nonce reported to the chain.
  bytes salt = 1;
}

message InitResponse {
  // The new worker session.
  bytes session = 1;
  // The seed used to derive the session.
  bytes session_seed = 2;
}

// Represents a number.
message Number { uint64 value = 1; }

message ResizeArgs {
  // The address of the app to set the number of instances.
  // @codec scale crate::types::Address
  bytes address = 1;
  // The number of instances to set.
  uint64 instances = 2;
}

message QueryArgs {
  // The address of the app to query.
  // @codec scale crate::types::Address
  bytes address = 1;
  // The path of the query.
  string path = 2;
  // The payload of the query.
  bytes payload = 3;
}

message QueryResponse {
  // The response payload from the app.
  bytes output = 1;
}

// Request to list deployed apps.
message AppListArgs {
  // The pagination start.
  uint32 start = 1;
  // The maximum number of apps to list.
  uint32 count = 2;
}
