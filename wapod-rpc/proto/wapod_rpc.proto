syntax = "proto3";

import "google/protobuf/empty.proto";

package wapod;

// The wapod public RPC service.
service User {
  // Get basic information about the worker state.
  rpc Info(google.protobuf.Empty) returns (WorkerInfo) {
    // Retrieves the basic information about the worker, including the public
    // key, number of deployed apps, running instances, maximum instances,
    // instance memory size, and the worker's session ID.
  }
  // Send a query request to a given app.
  rpc Query(QueryArgs) returns (QueryResponse) {
    // Sends a query request to the specified app, with the provided path and
    // payload. Returns the response payload from the app.
  }
  // Send an encrypted query request to a given app.
  rpc EncryptedQuery(EncryptedQueryArgs) returns (QueryResponse) {
    // Sends a query request to the specified app, with the provided path and
    // payload. Returns the response payload from the app.
  }
}

// The wapod admin RPC service.
service Operation {
  // Get basic information about the worker state.
  rpc Info(google.protobuf.Empty) returns (WorkerInfo) {
    // Retrieves the basic information about the worker, including the public
    // key, number of deployed apps, running instances, maximum instances,
    // instance memory size, and the worker's session ID.
  }
  // Initialize the worker.
  rpc WorkerInit(InitArgs) returns (InitResponse) {
    // Initializes the worker with the provided initialization arguments,
    // including the previous metrics nonce reported to the chain. Returns the
    // new worker session and the seed used to derive the session.
  }
  // Return a signed register info that can be used to register the worker on
  // Phala.
  rpc SignRegisterInfo(SignRegisterInfoArgs)
      returns (SignRegisterInfoResponse) {}
  // Sign the given endpoint info
  rpc SignEndpoints(SignEndpointsArgs) returns (SignEndpointsResponse) {}
  // Sign the worker description.
  rpc SignWorkerDescription(SignWorkerDescriptionArgs)
      returns (SignWorkerDescriptionResponse) {}
  // Terminate the worker.
  rpc WorkerExit(google.protobuf.Empty) returns (google.protobuf.Empty) {
    // Terminates the worker.
  }
  // Put a blob to the worker's blobs directory.
  rpc BlobPut(Blob) returns (Blob) {
    // Stores the provided blob in the worker's blobs directory.
  }
  // Remove a blob from the blobs directory.
  rpc BlobRemove(Blob) returns (google.protobuf.Empty) {
    // Removes the provided blob from the worker's blobs directory.
  }
  // Check if a blob exists in the worker's blobs directory.
  rpc BlobExists(Blob) returns (Boolean) {
    // Checks if the provided blob exists in the worker's blobs directory.
  }
  // Deploy a new WASM instance.
  rpc AppDeploy(DeployArgs) returns (DeployResponse) {
    // Deploys a new WASM instance with the provided manifest, which includes
    // the runtime, code hash, arguments, environment variables, start mode,
    // salt, and whether the app is resizable. Returns the address and session
    // ID of the deployed instance.
  }
  // Remove an instance from the worker.
  rpc AppRemove(Address) returns (google.protobuf.Empty) {
    // Removes the app instance at the provided address from the worker.
  }
  // Start an instance from the worker.
  rpc AppStart(Address) returns (google.protobuf.Empty) {
    // Starts the app instance at the provided address. On-demand instances will
    // reject this request.
  }
  // Stop an instance from the worker.
  rpc AppStop(Address) returns (google.protobuf.Empty) {
    // Stops the app instance at the provided address.
  }
  // Set the number of instances of an app.
  rpc AppResize(ResizeArgs) returns (Number) {
    // Sets the number of instances for the app at the provided address. Returns
    // the actual number of instances after the operation, which may be less
    // than the requested number due to the worker's capacity or the app's
    // support for multiple instances.
  }
  // Get metrics for each instance.
  rpc AppMetrics(Addresses) returns (AppMetricsResponse) {
    // Retrieves the metrics for the app instances at the provided addresses.
    // Returns the encoded metrics payload and the signature of the payload.
  }
  // List all deployed apps.
  rpc AppList(AppListArgs) returns (AppListResponse) {
    // Returns a list of information about all the deployed apps, including the
    // sequence number, address, number of running instances, whether the number
    // of instances is resizable, and the start mode.
  }
  // Remove all deployed apps.
  rpc AppRemoveAll(google.protobuf.Empty) returns (google.protobuf.Empty) {
    // Removes all deployed apps from the worker.
  }
  // Send a query request to a given app.
  rpc AppQuery(QueryArgs) returns (QueryResponse) {
    // Sends a query request to the app at the provided address, with the
    // specified path and payload. Returns the response payload from the app.
  }
  // Send an encrypted query request to a given app.
  rpc AppEncryptedQuery(EncryptedQueryArgs) returns (QueryResponse) {
    // Sends a query request to the specified app, with the provided path and
    // payload. Returns the response payload from the app.
  }
  // Set the benchmark app.
  rpc SetBenchApp(SetBenchAppArgs) returns (google.protobuf.Empty) {}
}

// Basic information about a worker.
message WorkerInfo {
  // The public key of the worker.
  // @codec scale [u8; 32]
  bytes pubkey = 1;
  // The number of deployed apps.
  uint64 deployed_apps = 2;
  // The number of running instances.
  uint64 running_instances = 3;
  // The number of instances reported by the low level driver.
  // This should be the same as running_instances unless there is a bug.
  uint64 vm_instances = 9;
  // The maximum number of instances.
  uint64 max_instances = 4;
  // The size limit of memory for each instance.
  uint64 instance_memory_size = 5;
  // The session ID of the worker.
  bytes session = 6;
  // The memory information of the worker.
  MemoryUsage memory_usage = 7;
  // The information of the module loader.
  ModuleLoaderInfo module_loader_info = 8;
  // The port range for TCP listen.
  string tcp_listen_port_range = 10;
  // The address of current benchmark app.
  bytes bench_app_address = 11;
  // The maximum number of benchmark app instances.
  uint64 bench_app_instances = 12;
}

message MemoryUsage {
  // The current heap usage of Rust codes.
  uint64 rust_used = 1;
  // The peak heap usage of Rust codes.
  uint64 rust_peak = 2;
  // The peak heap usage of Rust codes in a recent short-term.
  uint64 rust_spike = 3;
  // Process memory used.
  uint64 used = 4;
  // The entire peak heap memory usage of the enclave.
  uint64 peak = 5;
  // The memory left.
  uint64 free = 6;
}

message ModuleLoaderInfo {
  // The maximum number of compilation threads that can be run concurrently.
  uint32 max_compilation_tasks = 1;
  // The capacity of the queue of the code hashes waiting to be compiled.
  uint32 queue_cap = 2;
  // The current number of items in the queue.
  uint32 queue_used = 3;
  // The capacity of the cache used for storing compilation results.
  uint32 cache_cap = 4;
  // The current number of items in the cache.
  uint32 cache_used = 5;
  // The length of the handles that are currently being compiled or waiting to
  // be compiled.
  uint32 compiling_handles_len = 6;
  // The number of threads that are currently in the process of compiling.
  uint32 compiling_tasks = 7;
}

message SignRegisterInfoArgs {
  // The genesis block hash
  // @codec scale [u8; 32]
  bytes genesis_block_hash = 1;
  // The operator
  // @codec scale Option<[u8; 32]>
  bytes operator = 2;
  // The parachain id
  uint32 para_id = 3;
}

message SignRegisterInfoResponse {
  // @codec scale crate::types::WorkerRegistrationInfoV2
  bytes encoded_runtime_info = 1;
  // @codec scale Option<crate::types::AttestationReport>
  bytes encoded_report = 2;
}

message SignEndpointsArgs {
  // The endpoint list
  repeated string endpoints = 1;
}

message SignEndpointsResponse {
  // @codec scale crate::types::WorkerEndpointPayload
  bytes encoded_endpoint_payload = 1;
  bytes signature = 2;
}

message SignWorkerDescriptionArgs {
  // The endpoint list
  string description = 1;
  // The prices
  // @codec scale crate::types::Prices
  bytes prices = 2;
}

message SignWorkerDescriptionResponse {
  // @codec scale crate::types::SignedWorkerDescription
  bytes encoded_signed_description = 1;
}

// An object to be stored in the worker's object storage.
message Blob {
  // The key of the object.
  string hash = 1;
  // The value of the object.
  bytes body = 2;
}

// Request to deploy an instance.
message DeployArgs {
  // Manifest of the app to be deployed.
  Manifest manifest = 1;
}

message DeployResponse {
  // The address of the deployed instance.
  bytes address = 1;
  // The session ID of the deployed instance.
  bytes session = 2;
}

// Manifest of an app.
message Manifest {
  // The spec version of the manifest.
  uint32 version = 1;
  // The hash of the app's code.
  string code_hash = 2;
  // The arguments of the app.
  repeated string args = 3;
  // The environment variables of the app.
  repeated StringPair env_vars = 4;
  // The start mode of the app.
  bool on_demand = 5;
  // Whether the app can run multiple instances in a single worker.
  bool resizable = 6;
  // The maximum size of the query payload.
  uint32 max_query_size = 7;
  // The optional label of the app.
  string label = 8;
  // The required blobs required by the app.
  repeated StringPair required_blobs = 9;
}

// Environment variable of an app.
message StringPair {
  // The key of the environment variable.
  string key = 1;
  // The value of the environment variable.
  string value = 2;
}

// Address of an app.
message Address {
  // @codec scale crate::types::Address
  bytes address = 1;
}

message Addresses {
  // @codec scale crate::types::Address
  repeated bytes addresses = 1;
}

message AppMetricsResponse {
  // @codec scale crate::types::VersionedAppsMetrics
  // The metrics payload.
  bytes encoded_metrics = 1;
  // The signature of the metrics payload.
  bytes signature = 2;
}

message AppListResponse {
  // The list of deployed apps.
  repeated AppInfo apps = 2;
}

message AppInfo {
  // The sequence number of the app.
  uint64 sn = 1;
  // The address of the app.
  // @codec scale crate::types::Address
  bytes address = 2;
  // The number of running instances of the app.
  uint64 instances = 3;
  // The elapsed time since last query to the app (in seconds).
  uint64 last_query_elapsed = 4;
  // The manifest
  Manifest manifest = 5;
}

message Boolean { bool value = 1; }

message InitArgs {
  // The previous metrics nonce reported to the chain.
  bytes pnonce = 1;
  // The AccountId of the ticket settlement recipient.
  string recipient = 2;
}

message InitResponse {
  // The new worker session.
  // @codec scale crate::types::SessionUpdate
  bytes session_update = 1;
  bytes signature = 2;
  bytes pubkey = 3;
}

// Represents a number.
message Number { uint64 value = 1; }

message ResizeArgs {
  // The address of the app to set the number of instances.
  // @codec scale crate::types::Address
  bytes address = 1;
  // The number of instances to set.
  uint64 instances = 2;
}

message QueryArgs {
  // The address of the app to query.
  // @codec scale crate::types::Address
  bytes address = 1;
  // The path of the query.
  string path = 2;
  // The payload of the query.
  bytes payload = 3;
  // Signer of the request.
  // @codec scale Option<crate::types::QuerySignature>
  bytes encoded_signature = 4;
}

message EncryptedQueryArgs {
  // The public key of the user.
  bytes pubkey = 1;
  // The encrypted payload of the query.
  bytes encrypted_payload = 2;
}

message QueryResponse {
  // The response payload from the app.
  bytes output = 1;
}

// Request to list deployed apps.
message AppListArgs {
  // The pagination start.
  uint32 start = 1;
  // The maximum number of apps to list.
  uint32 count = 2;
}

message SetBenchAppArgs {
  // The address of the benchmark app.
  // @codec scale Option<[u8; 32]>
  bytes app_address = 1;
  // The maximum number of instances of the benchmark app.
  uint64 instances = 2;
}
