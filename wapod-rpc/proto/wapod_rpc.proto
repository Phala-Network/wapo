
syntax = "proto3";

import "google/protobuf/empty.proto";

package wapod;

// The wapod public RPC.
service Status {
  // Get basic information about the worker state.
  rpc Info(google.protobuf.Empty) returns (WorkerInfo) {}
}

// The wapod admin RPC.
service Admin {
  // Initialize the worker.
  rpc Init(InitArgs) returns (InitResponse) {}
  // Top the worker.
  rpc Exit(google.protobuf.Empty) returns (google.protobuf.Empty) {}
}

service Blobs {
  // Put a blob to the worker's blobs directory.
  rpc Put(Blob) returns (google.protobuf.Empty) {}
  // Remove a blob from the blobs directory.
  rpc Remove(Blob) returns (google.protobuf.Empty) {}
  // Check if a blob exists in the worker's blobs directory.
  rpc Exists(Blob) returns (Boolean) {}
}

// The instances management RPC.
service Instances {
  // Deploy a new WASM instance.
  rpc Deploy(DeployArgs) returns (DeployResponse) {}
  // Remove an instance from the worker.
  rpc Remove(Address) returns (google.protobuf.Empty) {}
  // Start an instance from the worker. On-demand instance will reject this
  // request.
  rpc Start(Address) returns (google.protobuf.Empty) {}
  // Stop an instance from the worker.
  rpc Stop(Address) returns (google.protobuf.Empty) {}
  // Get metrics for each app
  rpc Metrics(Addresses) returns (InstanceMetricsResponse) {}
}

// Basic information about a worker.
message WorkerInfo {
  // The public key of the worker.
  bytes pubkey = 1;
  // The number of running instances.
  uint32 running_instances = 2;
  // The number of maximum instances.
  uint32 max_instances = 3;
  // The size limit of memory of each instance.
  uint32 instance_memory_size = 4;
  // The session id of the worker.
  bytes session = 5;
}

// An object to be stored in the worker's object storage.
message Blob {
  // The key of the object.
  bytes hash = 1;
  // The hash algorithm used to generate the key.
  string hash_algrithm = 2;
  // The value of the object.
  bytes body = 3;
}

// Request to deploy an app.
message DeployArgs {
  // Manifest of an app.
  Manifest manifest = 1;
}

message DeployResponse {
  // The address of the deployed instance.
  bytes address = 1;
  // The session id of the deployed instance.
  bytes session = 2;
}

// Manifest of an app.
message Manifest {
  // Name of the required runtime to run the app.
  string runtime = 1;
  // The hash of the app's code.
  bytes code_hash = 2;
  // The hash algorithm used to generate the code hash.
  string hash_algorithm = 3;
  // The arguments of the app.
  repeated string args = 4;
  // The environment variables of the app.
  repeated StringPair env_vars = 5;
  // The start mode of the app.
  int32 start_mode = 6;
  // The salt used to derive the app's address.
  bytes salt = 7;
}

// Environment variable of an app.
message StringPair {
  // The key of the environment variable.
  string key = 1;
  // The value of the environment variable.
  string value = 2;
}

// Address of an app.
message Address {
  // @codec scale crate::types::Address
  bytes address = 1;
}

message Addresses {
  // @codec scale crate::types::Address
  repeated bytes addresses = 1;
}

message InstanceMetricsResponse {
  // @codec scale crate::types::Metrics
  // The metrics payload.
  bytes encoded_metrics = 1;
  // The signature of the metrics payload.
  bytes signature = 2;
}

message Boolean { bool value = 1; }

message InitArgs {
  // The previous metrics nonce reported to the chain.
  bytes salt = 1;
}

message InitResponse {
  // The new worker session.
  bytes session = 1;
  // The seed used to derive the session.
  bytes session_seed = 2;
}
