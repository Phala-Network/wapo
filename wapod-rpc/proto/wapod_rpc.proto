
syntax = "proto3";

import "google/protobuf/empty.proto";

package wapod;

// The wapod public RPC.
service User {
  // Get basic information about the worker state.
  rpc Info(google.protobuf.Empty) returns (WorkerInfo) {}
}

// The wapod admin RPC.
service Admin {
  // Get basic information about the worker state.
  rpc Info(google.protobuf.Empty) returns (WorkerInfo) {}
  // Put an object to the worker's object storage.
  rpc PutObject(Object) returns (google.protobuf.Empty) {}
  // Deploy a new WASM instance.
  rpc Deploy(Manifest) returns (Address) {}
  // Remove an instance from the worker.
  rpc Remove(Address) returns (google.protobuf.Empty) {}
  // Start an instance from the worker. On-demand instance will reject this
  // request.
  rpc Start(Address) returns (google.protobuf.Empty) {}
  // Stop an instance from the worker.
  rpc Stop(Address) returns (google.protobuf.Empty) {}
  // Get metrics for each app
  rpc InstanceMatrics(Addresses) returns (InstanceMetricsResponse) {}
}

// Basic information about a worker.
message WorkerInfo {
  // The public key of the worker.
  bytes pubkey = 1;
  // The number of running instances.
  uint32 running_instances = 2;
  // The number of maximum instances.
  uint32 max_instances = 3;
  // The size limit of memory of each instance.
  uint32 instance_memory_size = 4;
}

// An object to be stored in the worker's object storage.
message Object {
  // The key of the object.
  bytes hash = 1;
  // The hash algorithm used to generate the key.
  string hash_algrithm = 2;
  // The value of the object.
  bytes body = 3;
}

// Manifest of an app.
message Manifest {
  // Name of the required runtime to run the app.
  string runtime = 1;
  // The hash of the app's code.
  bytes code_hash = 2;
  // The hash algorithm used to generate the code hash.
  string hash_algorithm = 3;
  // The arguments of the app.
  repeated string args = 4;
  // The environment variables of the app.
  repeated StringPair env_vars = 5;
  // The start mode of the app.
  int32 start_mode = 6;
  // The salt used to derive the app's address.
  bytes salt = 7;
}

// Environment variable of an app.
message StringPair {
  // The key of the environment variable.
  string key = 1;
  // The value of the environment variable.
  string value = 2;
}

// Address of an app.
message Address {
  // @codec scale crate::types::Address
  bytes address = 1;
}

message Addresses {
  // @codec scale crate::types::Address
  repeated bytes addresses = 1;
}

message InstanceMetricsResponse {
  repeated InstanceMetrics metrics = 1;
  bytes signature = 2;
}

// Metrics of an instance.
message InstanceMetrics {
  // The address of the instance.
  // @codec scale crate::types::Address
  bytes address = 1;
  bytes session = 2;
  uint64 running_time_ms = 3;
  // The CPU usage of the instance.
  uint64 gas_consumed = 4;
  // The network usage of the instance.
  uint64 network_ingress = 5;
  uint64 network_egress = 6;
  // The disk usage of the instance.
  uint64 storage_read = 7;
  uint64 storage_write = 8;
  // The number of starts of the instance.
  uint64 starts = 9;
}