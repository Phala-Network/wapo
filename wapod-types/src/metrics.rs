//! Types for app metrics.

use scale::{Decode, Encode, MaxEncodedLen};
use scale_info::TypeInfo;
use serde::{Deserialize, Serialize};

use crate::{
    crypto::{
        verify::{verify_message, Verifiable},
        CryptoProvider, Signature,
    },
    primitives::{BoundedVec, WorkerPubkey},
    ticket::TicketId,
    Address, Bytes32, ContentType,
};

/// The metrics token.
#[derive(
    Decode,
    Encode,
    TypeInfo,
    MaxEncodedLen,
    Debug,
    Clone,
    PartialEq,
    Eq,
    Default,
    Serialize,
    Deserialize,
)]
pub struct MetricsToken {
    /// The sequence number of the metrics token. Reset to 0 when the worker session is reset.
    pub sn: u64,
    /// The session id.
    pub session: [u8; 32],
    /// A random nonce generated by the worker.
    pub nonce: [u8; 32],
}

/// The app metrics.
#[derive(Debug, Encode, Decode, TypeInfo, MaxEncodedLen, Clone, PartialEq, Eq, Default)]
pub struct AppMetrics {
    /// The address of the app.
    pub address: Address,
    /// The session id of the app.
    pub session: Bytes32,
    /// The accumulated time that the app has been running.
    pub running_time_ms: u64,
    /// The accumulated gas consumed by the app.
    pub gas_consumed: u64,
    /// The accumulated network ingress of the app in bytes.
    pub network_ingress: u64,
    /// The accumulated network egress of the app in bytes.
    pub network_egress: u64,
    /// The accumulated storage read of the app in bytes.
    pub storage_read: u64,
    /// The accumulated storage write of the app in bytes.
    pub storage_write: u64,
    /// The storage used by the app. (not used yet)
    pub storage_used: u128,
    /// The memory used by the app. (not used yet)
    pub memory_used: u128,
    /// The tip that the worker received for running the app.
    pub tip: u64,
    /// The counter of the number of times the app has been started.
    pub starts: u64,
}

/// The maximum number of app metrics in a single submission.
pub const MAX_APPS_METRICS: usize = 64;
/// The maximum number of claim tickets per app in a single submission.
pub const MAX_CLAIM_TICKETS: usize = 3;

/// A list of app metrics.
#[derive(Debug, Encode, Decode, TypeInfo, MaxEncodedLen, Clone, PartialEq, Eq)]
pub struct AppsMetrics {
    /// The metrics token generated by the worker.
    pub token: MetricsToken,
    /// The app metrics.
    pub apps: BoundedVec<AppMetrics, MAX_APPS_METRICS>,
}

/// A versioned apps metrics.
#[derive(Debug, Encode, Decode, TypeInfo, MaxEncodedLen, Clone, PartialEq, Eq)]
pub enum VersionedAppsMetrics {
    /// V0
    V0(AppsMetrics),
}

/// A map from app address to a list of claim tickets.
pub type ClaimMap =
    BoundedVec<(Address, BoundedVec<TicketId, MAX_CLAIM_TICKETS>), MAX_APPS_METRICS>;

/// A signed apps metrics.
#[derive(Debug, Encode, Decode, TypeInfo, MaxEncodedLen, Clone, PartialEq, Eq)]
pub struct SignedAppsMetrics {
    /// The metrics.
    pub metrics: VersionedAppsMetrics,
    /// The signature of the metrics.
    pub signature: Signature,
    /// The public key of the worker that signed the metrics.
    pub worker_pubkey: WorkerPubkey,
}

impl SignedAppsMetrics {
    /// Construct a new signed apps metrics.
    pub fn new(
        metrics: VersionedAppsMetrics,
        signature: BoundedVec<u8, 128>,
        worker_pubkey: WorkerPubkey,
    ) -> Self {
        Self {
            metrics,
            signature,
            worker_pubkey,
        }
    }
}
impl Verifiable for SignedAppsMetrics {
    fn verify<Crypto: CryptoProvider>(&self) -> bool {
        let encoded_message = self.metrics.encode();
        verify_message::<Crypto>(
            ContentType::Metrics,
            &encoded_message,
            &self.signature,
            &self.worker_pubkey,
        )
    }
}
