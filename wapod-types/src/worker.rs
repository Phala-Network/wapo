//! Worker registration info and attestation report.

use alloc::string::String;
use alloc::vec::Vec;
use scale::{Decode, Encode};
use scale_info::TypeInfo;

use crate::primitives::{Address, Hash, WorkerPubkey};

/// Worker registration info.
#[derive(Encode, Decode, TypeInfo, Debug, Clone, PartialEq, Eq)]
pub struct WorkerRegistrationInfoV2 {
    /// The version of the worker.
    pub version: u32,
    /// The worker's machine ID. (deprecated)
    pub machine_id: Vec<u8>,
    /// The worker's public key.
    pub pubkey: WorkerPubkey,
    /// The worker's ECDH public key.
    pub ecdh_pubkey: WorkerPubkey,
    /// The blockchain genesis block hash used to initialize the worker.
    pub genesis_block_hash: Hash,
    /// The worker's features. (deprecated)
    pub features: Vec<u32>,
    /// The operator account ID that can control the worker.
    pub operator: Option<Address>,
    /// The parachain ID that the worker is registered to.
    pub para_id: u32,
    /// The maximum consensus version that the worker supports. (deprecated)
    pub max_consensus_version: u32,
}

/// An attestation report.
#[derive(Encode, Decode, TypeInfo, Debug, Clone, PartialEq, Eq)]
pub enum AttestationReport {
    /// An IAS attestation report. (deprecated)
    SgxIas,
    /// A DCAP attestation report.
    SgxDcap {
        /// The sgx quote generated by the worker.
        quote: Vec<u8>,
        /// The collateral got from a PCCS server.
        collateral: Option<()>,
    },
}

/// Endpoints payload.
#[derive(Encode, Decode, TypeInfo, Debug, Clone, PartialEq, Eq)]
pub enum VersionedWorkerEndpoints {
    /// V1
    V1(Vec<String>),
}

/// Payload of a worker endpoint message.
#[derive(Encode, Decode, TypeInfo, Debug, Clone, PartialEq, Eq)]
pub struct WorkerEndpointPayload {
    /// Worker public key.
    pub pubkey: WorkerPubkey,
    /// Worker versioned endpoints.
    pub versioned_endpoints: VersionedWorkerEndpoints,
    /// The time when the message was signed.
    pub signing_time: u64,
}
